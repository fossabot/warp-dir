#!/usr/bin/env ruby
require 'bundler/setup'
require 'warp/dir'
require 'warp/dir/commands'
require 'slop'

# Slop v4 no longer supports commands, so we fake it:
# if the first argument does not start with a dash, it must be a command.
# So fake-add `--command` flag in front of it.
if ARGV[0] && !ARGV[0][0].eql?('-')
  ARGV.unshift('--command')
end

opts = Slop::Options.new
opts.banner = %Q{
  Usage: wd [ --command ] [ show | list | clean | validate | wipe ]          [ flags ]
         wd [ --command ] [ add  [ -f/--force ] | rm | ls | path ] <point>   [ flags ]
         wd --help | help

  Warp Point Commands:
    add   <point>   Adds the current directory as a new warp point
    rm    <point>   Removes a warp point
    show  <point>   Show the path to the warp point
    ls    <point>   Show files from tne warp point
    path  <point>   Show the path to given warp point

  Global Commands:
    show            Print warp points to current directory
    list            Print all stored warp points
    clean           Remove points warping to nonexistent directories
    help            Show this extremely unhelpful text
}

Warp::Dir::Commands::Base.installed_commands.values.each do |installed_command|
  opts.banner << sprintf("    %s\n", installed_command.help)
end
opts.banner << %q{
  Flags:}

opts.string '-m', '--command',  'command to run, ie. add, ls, list, rm, etc.'
opts.bool   '-h', '--help',     'show help'
opts.bool   '-v', '--verbose',  'enable verbose mode'
opts.bool   '-q', '--quiet',    'suppress output (quiet mode)'
opts.string '-c', '--config',   'location of the configuration file (default: ' + Warp::Dir.config + ')', default: Warp::Dir.config
opts.on     '-V', '--version',  'print the version' do
  puts "Version " + Warp::Dir::VERSION
  exit
end

parser = Slop::Parser.new(opts)
result = parser.parse(ARGV)

config = Warp::Dir::Config.new(result.to_hash)
store = Warp::Dir::Store.new(config)

Warp::Dir::Commands::Base.validate!
if config.command
  command_class = Warp::Dir::Commands::Base.installed_commands[config.command.to_sym]
  if command_class
    command_class.new(store).run
  else
    puts "Command '#{config.command}' was not found."
  end
else
  if result.help?
    puts result
    exit 0
  end
end
